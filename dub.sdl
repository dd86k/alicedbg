name "alicedbg"
description "Aiming to be a simple debugger"
homepage "http://github.com/dd86k/alicedbg"
authors "dd86k <dd@dax.moe>"
copyright "Copyright Â© 2019-2021 dd86k <dd@dax.moe>"
license "BSD 3-clause"
version "0.0.0"

# NOTE: BetterC flag
#       We explicitly specify the betterC flag to support older DUB releases
#       Like v0.9.24
# NOTE: GDC 5.4
#       Doesn't work, ld whines about missing _tlsstart/_tlsend (TLS) references
#       value for C++/ObjC but not D:
#         -fno-rtti
#         -fno-weak
#         -fno-threadsafe-statics
#         -fextern-tls-init
#       -fno-switch-errors: not a command-line option
#       -nophoboslib: makes the linker complain more
#       Tried with "-fno-moduleinfo" "-fno-emit-moduleinfo"
# NOTE: GDC and betterC
#       Currently (even with GDC 10.3), when compiled with -fno-druntime
#       (similar to -betterC), the linker will whine about an undefined reference
#       to __gdc_personality_v0, because the gdc-druntime defines this reference.
#       Glibc (and subsequently, GCC) has a similiar function,
#       __gcc_personality_v0, that is served when unwinding the stack, so to
#       handle exceptions.
# NOTE: GDC 11.1 and betterC
#       Yes, it works with -fno-druntime, so it can be possible to add
#       -gdc-betterc build types in the future.

#
# SECTION Configurations
#

# Not a subPackage because I want to avoid generating a seperate library
configuration "application" {
	targetType "executable"
	sourcePaths "app"
	importPaths "app"
	mainSourceFile "app/main.d"
}
configuration "library" {
	sourcePaths "src"
}

#
# SECTION Build types
#

# Debug build with tracing enabled. This will be extremely verbose and the
# output will be cryptid.
# Only to be used with small reproductible bugs.
buildType "trace" {
	versions "Trace"
	buildOptions "debugMode" "debugInfo"
	dflags "-betterC" "-vgc" "-vtls" platform="dmd"
	dflags "-betterC" "--vgc" platform="ldc"
	dflags "-ftransition=nogc" "-ftransition=tls" platform="gdc"
}

# Make the compiler print GC and TLS usage, and target information.
buildType "debugv" {
	versions "PrintTargetInfo"
	buildOptions "debugMode" "debugInfo"
	dflags "-betterC" "-vgc" "-vtls" platform="dmd"
	dflags "-betterC" "--vgc" platform="ldc"
	dflags "-ftransition=nogc" "-ftransition=tls" platform="gdc"
}

# Ditto but aimed for older compiler version
# Like older dmd versions, ldc 0.17.1, and gdc 6.0
buildType "debugv0" {
	versions "PrintTargetInfo"
	buildOptions "debugMode" "debugInfo"
	dflags "-vgc" "-vtls" platform="dmd"
	dflags "--vgc" platform="ldc"
	dflags "-ftransition=nogc" "-ftransition=tls" "-fno-exceptions" "-fno-bounds-check" "-fno-assert" "-fno-builtin" platform="gdc"
}

# Make the compiler verbose instead of DUB.
buildType "debugvv" {
	buildOptions "debugMode" "debugInfo"
	dflags "-betterC" "-v" platform="dmd"
	dflags "-betterC" "-v" platform="ldc"
	dflags "-v" platform="gdc"
}

# Compile in debug mode.
buildType "debug" {
	buildOptions "debugMode" "debugInfo"
	dflags "-betterC" platform="dmd"
	dflags "-betterC" platform="ldc"
}

# Compile in release mode.
buildType "release" {
	buildOptions "releaseMode" "optimize"
	dflags "-betterC" platform="dmd"
	dflags "-betterC" platform="ldc"
}

# Compile in release mode with no bound checking.
buildType "release-nobounds" {
	buildOptions "releaseMode" "optimize" "noBoundsCheck"
	dflags "-betterC" platform="dmd"
	dflags "-betterC" platform="ldc"
}

#
# SECTION Unit tests
#
# These are separated into their own because they either:
# - Require interaction;
# - Or are too lengthy for normal testing.
#

# general: utilities, etc.
buildType "general" {
	buildOptions "unittests"
	sourceFiles "tests/general.d"
}
# disasm: mini-fuzzer
buildType "disasm-fuzzer" {
	buildOptions "unittests"
	sourceFiles "tests/disasm-fuzzer.d"
}
# disasm: decoding/analysis
buildType "disasm-x86" {
	buildOptions "unittests"
	sourceFiles "tests/disasm.d" "tests/disasm-x86.d"
}
# syntaxer: output
buildType "syntax" {
	buildOptions "unittests"
	sourceFiles "tests/syntax.d"
}
# crt: setjmp
buildType "setjmp" {
	buildOptions "unittests"
	sourceFiles "tests/setjmp.d"
}
# terminal: readkey
buildType "readkey" {
	buildOptions "unittests"
	sourceFiles "tests/readkey.d"
}
# terminal: readline
buildType "readline" {
	buildOptions "unittests"
	sourceFiles "tests/readline.d"
}
# utils: string expand
buildType "expand" {
	buildOptions "unittests"
	sourceFiles "tests/expand.d"
}
# Run all non-interactive tests
buildType "all" {
	buildOptions "unittests"
	sourceFiles "tests/disasm.d" "tests/syntax.d" "tests/expand.d"
}

#
# SECTION Documentation
#

# Brings back ddox
buildType "ddox" {
	versions "__DDOX"
}