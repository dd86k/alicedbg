name "alicedbg"
description "Aiming to be a simple debugger"
homepage "http://github.com/dd86k/alicedbg"
authors "dd86k <dd@dax.moe>"
copyright "Copyright Â© 2019-2021 dd86k <dd@dax.moe>"
license "BSD 3-clause"
version "0.0.0"

#
# Common build types
#

# Default configuration.
configuration "application" {
	targetType "executable"
	versions "Build_Application"
}

# Make the compiler very verbose, only for diagnostics when compiling.
buildType "debugvv" {
	buildOptions "debugMode" "debugInfo" platform="dmd"
	buildOptions "debugMode" "debugInfo" platform="ldc"
	buildOptions "debugMode" "debugInfo" platform="gdc"
	dflags "-betterC" "-v" "-vgc" "-vtls" platform="dmd"
	dflags "-betterC" "-v" "--vgc" platform="ldc"
	dflags "-v" "-ftransition=nogc" "-ftransition=tls" platform="gdc"
}

# Compile in debug mode and make the compiler emit GC and TLS usage.
# Mostly interested in the latter, as betterC does not attach the druntime at
# compile-time, thus rending the GC point moot, but just in case.
buildType "debugv" {
	buildOptions "debugMode" "debugInfo" platform="dmd"
	buildOptions "debugMode" "debugInfo" platform="ldc"
	buildOptions "debugMode" "debugInfo" platform="gdc"
	dflags "-betterC" "-vgc" "-vtls" platform="dmd"
	dflags "-betterC" "--vgc" platform="ldc"
	dflags "-ftransition=nogc" "-ftransition=tls" platform="gdc"
}

# Compile in debug mode.
buildType "debug" {
	buildOptions "debugMode" "debugInfo" platform="dmd"
	buildOptions "debugMode" "debugInfo" platform="ldc"
	buildOptions "debugMode" "debugInfo" platform="gdc"
	dflags "-betterC" platform="dmd"
	dflags "-betterC" platform="ldc"
}

# Compile in release mode.
buildType "release" {
	buildOptions "releaseMode" "optimize" platform="dmd"
	buildOptions "releaseMode" "optimize" platform="ldc"
	buildOptions "releaseMode" "optimize" platform="gdc"
	dflags "-betterC" platform="dmd"
	dflags "-betterC" platform="ldc"
}

# Compile in release mode with no bound checking.
buildType "release-nobounds" {
	buildOptions "releaseMode" "optimize" "noBoundsCheck" platform="dmd"
	buildOptions "releaseMode" "optimize" "noBoundsCheck" platform="ldc"
	buildOptions "releaseMode" "optimize" "noBoundsCheck" platform="gdc"
	dflags "-betterC" platform="dmd"
	dflags "-betterC" platform="ldc"
}

# Compile in release mode with no bound checking and inlined functions.
# This is the maximum performance option, may take much longer to compile.
# Highly discouraged for building as a library and official release builds.
buildType "release-inline" {
	buildOptions "releaseMode" "optimize" "noBoundsCheck" "inline" platform="dmd"
	buildOptions "releaseMode" "optimize" "noBoundsCheck" "inline" platform="ldc"
	buildOptions "releaseMode" "optimize" "noBoundsCheck" "inline" platform="gdc"
	dflags "-betterC" platform="dmd"
	dflags "-betterC" platform="ldc"
}

#
# Library-related
#

# Generate a library.
configuration "library" {
	targetType "library"
	excludedSourceFiles "src/ui/*" "src/main.d"
}
# Ditto as dub docs.
configuration "sourceLibrary" {
	targetType "sourceLibrary"
	excludedSourceFiles "src/ui/*" "src/main.d"
}
# Force output to a static library.
configuration "staticlibrary" {
	targetType "library"
	excludedSourceFiles "src/ui/*" "src/main.d"
}
# Force output to a dynamic/shared library.
# NOTICE: Broken on windows, regardless of compiler used.
configuration "dynamicLibrary" {
	targetType "dynamicLibrary"
	excludedSourceFiles "src/ui/*" "src/main.d"
}

# Generate headers
buildType "headers" {
	buildOptions "syntaxOnly"
	dflags "-H" "--Hd=dinclude" platform="ldc"
	dflags "-H" "-Hd=dinclude" platform="dmd"
}

#
# Fuzzers
#

# AFL fuzzing test
buildType "afl" {
	toolchainRequirements dmd="no" gdc="no" ldc=">=1.0.0"
	dflags "-plugin=$AFL_ROOT/afl-llvm-pass.so"
	sourceFiles "$AFL_ROOT/afl-llvm-rt.o"
	versions "AFL"
	buildOptions "debugMode" "debugInfo"
	dflags "-betterC" platform="dmd"
	dflags "-betterC" platform="ldc"
}

#
# Profilers
#

# Build in profile-debug mode, this permits self-profiling. Not related to
# future profiling feature within alicedbg.
# NOTICE: Currently broken, do not use!
# TODO: add dmain.d as a wrapper and manually call main.
#       This will permit using the profiler from the druntime (for hooks).
#       If that doesn't work, exclude main.d and try something else.
buildType "profile" {
	buildOptions "debugMode" "debugInfo" "profile" platform="dmd"
	buildOptions "debugMode" "debugInfo" "profile" platform="ldc"
	buildOptions "debugMode" "debugInfo" "profile" platform="gdc"
	dflags "-betterC" platform="dmd"
	dflags "-betterC" platform="ldc"
}

#
# Tests
#

# Disassembler scrambler test
buildType "loopdisasm" {
	buildOptions "unittests"
	versions "TestLoopDisasm"
	sourceFiles "tests/loop/disasm.d"
}
